import java.io.IOException;
import java.sql.SQLException;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;

import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

public class Main {
	private Dao<Book, Integer> bookDao;
	private Dao<Author, Integer> authorDao;
	private Dao<Customer, Integer> customerDao;
	private final static String DATABASE_URL = "jdbc:mysql://localhost/taller7";
	
	public static void main(String[] args) throws IOException {
	
		JdbcConnectionSource connectionSource = null;
		try {
			
			connectionSource = new JdbcConnectionSource(DATABASE_URL,"root","root");
			Main main= new Main();
			// setup our database and DAOs
			main.setupDatabase(connectionSource);
			main.send();
			// read and write some data
			System.out.println("\n\nIt seems to have worked\n\n");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// destroy the data source which should close underlying connections
			if (connectionSource != null) {
				connectionSource.close();
			}
		}
	}
	private void setupDatabase(ConnectionSource connectionSource) throws Exception {
		authorDao = DaoManager.createDao(connectionSource, Author.class);
		bookDao = DaoManager.createDao(connectionSource, Book.class);
		customerDao = DaoManager.createDao(connectionSource, Customer.class);

		/*// if you need to create the table
		TableUtils.createTable(connectionSource, Book.class);
		//quitar
		TableUtils.createTable(connectionSource, Author.class);
		//quitar
		TableUtils.createTable(connectionSource, Customer.class);*/
		
	}
	
	private void send() throws SQLException 
	{
		PodamFactory factory = new PodamFactoryImpl();
		// This will use constructor with maximum arguments and
		// then setters to populate POJO
		Author author = factory.manufacturePojoWithFullData(Author.class);
		authorDao.create(author);
		author.setBirthdate(new Date());
	
		
	}


}
